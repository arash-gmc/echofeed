generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Posts {
  id           String         @id @default(cuid())
  text         String?        @db.VarChar(300)
  date         DateTime       @default(now())
  authorId     String
  author       User           @relation(fields: [authorId], references: [id])
  refId        String?
  postRef      Posts?         @relation("repostRef", fields: [refId], references: [id])
  referedPosts Posts[]        @relation("repostRef")
  actions      PostsActions[]
}

model PostsActions {
  id         String     @id @default(cuid())
  actionType ActionType
  userId     String
  postId     String
  date       DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])
  post       Posts      @relation(fields: [postId], references: [id])
}

enum ActionType {
  like
  dislike
  bookmark
}

model Follow {
  id          Int    @id @default(autoincrement())
  followingId String
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id])
  follower    User   @relation("Follower", fields: [followerId], references: [id])

  @@unique([followerId, followingId])
}

model User {
  id             String         @id @default(cuid())
  name           String?
  hashedPassword String
  email          String?        @unique
  username       String         @unique
  emailVerified  DateTime?
  image          String?
  imagePublicId  String?
  accounts       Account[]
  sessions       Session[]
  posts          Posts[]
  ownedLists     List[]
  brithYear      Int?
  city           String?
  gender         Gender?
  following      Follow[]       @relation("Following")
  follower       Follow[]       @relation("Follower")
  postActions    PostsActions[]
}

enum Gender {
  male
  female
}

model List {
  id      String @id @default(cuid())
  name    String
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
  members String @db.Text
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
