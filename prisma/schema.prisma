generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Posts {
  id           String         @id @default(cuid())
  text         String?        @db.VarChar(300)
  date         DateTime       @default(now())
  authorId     String
  author       User           @relation(fields: [authorId], references: [id])
  refId        String?
  postRef      Posts?         @relation("repostRef", fields: [refId], references: [id])
  referedPosts Posts[]        @relation("repostRef")
  actions      PostsActions[]
  comments     Comment[]
}

model PostsActions {
  id         String     @id @default(cuid())
  actionType ActionType
  userId     String
  postId     String
  date       DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])
  post       Posts      @relation(fields: [postId], references: [id])
}

enum ActionType {
  like
  dislike
  bookmark
}

model Comment {
  id              String    @id @default(cuid())
  authorId        String
  author          User      @relation(fields: [authorId], references: [id])
  text            String
  postRefId       String?
  postRef         Posts?    @relation(fields: [postRefId], references: [id])
  commentRefId    String?
  commnetRef      Comment?  @relation("CommentForComment", fields: [commentRefId], references: [id])
  commentsRefered Comment[] @relation("CommentForComment")
  date            DateTime  @default(now())
}

model Follow {
  id          Int    @id @default(autoincrement())
  followingId String
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id])
  follower    User   @relation("Follower", fields: [followerId], references: [id])

  @@unique([followerId, followingId])
}

model User {
  id              String         @id @default(cuid())
  name            String?
  hashedPassword  String
  email           String?        @unique
  username        String         @unique
  emailVerified   DateTime?
  image           String?
  imagePublicId   String?
  accounts        Account[]
  sessions        Session[]
  posts           Posts[]
  ownedLists      List[]
  brithYear       Int?
  city            String?
  gender          Gender?
  following       Follow[]       @relation("Following")
  follower        Follow[]       @relation("Follower")
  fromMessages    Message[]      @relation("FromMessage")
  toMessages      Message[]      @relation("ToMessage")
  fromNotifiction Notification[] @relation("FromNotifiction")
  toNotifiction   Notification[] @relation("ToNotifiction")
  postActions     PostsActions[]
  comments        Comment[]
}

enum Gender {
  male
  female
}

model List {
  id      String @id @default(cuid())
  name    String
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])
  members String @db.Text
}

model Message {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  fromUser   User     @relation("FromMessage", fields: [fromUserId], references: [id])
  toUser     User     @relation("ToMessage", fields: [toUserId], references: [id])
  text       String
  seen       Boolean  @default(false)
  date       DateTime @default(now())
}

model Notification {
  id         String     @id @default(cuid())
  fromUserId String
  toUserId   String
  fromUser   User       @relation("FromNotifiction", fields: [fromUserId], references: [id])
  toUser     User       @relation("ToNotifiction", fields: [toUserId], references: [id])
  type       NotifTypes
  associated String
  seen       Boolean    @default(false)
  date       DateTime   @default(now())
}

enum NotifTypes {
  like
  comment
  follow
  repost
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
